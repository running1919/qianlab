// ---------------------------------------------------------
//   ATMEL Microcontroller Software Support  -  ROUSSET  -
// ---------------------------------------------------------
// The software is delivered "AS IS" without warranty or
// condition of any  kind, either express, implied or
// statutory. This includes without limitation any warranty
// or condition with respect to merchantability or fitness
// for any particular purpose, or against the infringements of
// intellectual property rights of others.
// ---------------------------------------------------------
//  File: SAM9_DDRAM.mac
//  User setup file for CSPY debugger.
//  1.1 08/Aug/06 jpp    : Creation
//
//  $Revision: 1.1.2.1 $
//
// ---------------------------------------------------------
__var __mac_i;
__var __mac_pt;

/*********************************************************************
*
*       execUserReset() : JTAG set initially to Full Speed
*/
execUserReset()
{
    __message "------------------------------ execUserReset ---------------------------------";
    _MapRAMAt0();                       //* Set the RAM memory at 0x00300000 & 0x00000000
    __message "-------------------------------Set PC Reset ----------------------------------";
}

/*********************************************************************
*
*       execUserPreload() : JTAG set initially to 32kHz
*/
execUserPreload()
{
    __message "------------------------------ execUserPreload ---------------------------------";
    __hwReset(0);                     //* Hardware Reset: CPU is automatically halted after the reset (JTAG is already configured to 32kHz)
    __writeMemory32(0xD3,0x98,"Register"); //*  Set CPSR
    __PllSetting();                   //* Init PLL
    __initDDRAM();                    //* Init DDRAM before load
    _MapRAMAt0();                     //* Set the RAM memory at 0x0020 0000 & 0x0000 0000
    _InitRSTC();                      //* Enable User Reset to allow execUserReset() execution
}



/*********************************************************************
*
*       _InitRSTC()
*
* Function description
*   Initializes the RSTC (Reset controller).
*   This makes sense since the default is to not allow user resets, which makes it impossible to
*   apply a second RESET via J-Link
*/
_InitRSTC() {
    __writeMemory32(0xA5000001, 0xFFFFFD08,"Memory");    // Allow user reset
}


/*********************************************************************
*
*       __initDDRAM()
* Function description
* Configuring the MICRON DDRAM controller
*/
__initDDRAM()
{
    __var tempVal;
    __message "-------------------------------Configuring the DDRAM controller------------\n";
    __message "-------------------------------MICRON DDRAM configuration------------------\n";

    // 0xFFFFE600 DDR2C Base Address

     /* *ADDR_CCFG_EBICSA = 0x01020002; /* EBI Chip Select 1 is assigned to the DDR2SDR Controller */
     //__writeMemory32(0x01020002,0xFFFFDF20,"Memory");  /* Rev. A EK*/  
	 __writeMemory32(0x0102030A,0xFFFFDF20,"Memory");    /* Rev. B EK and VB */
 
     /* Enable DDR2 clock x2 in PMC 
     PMC->PMC_SCER = PMC_SCER_DDRCK; */
    __writeMemory32(0x04,0xFFFFFC00,"Memory");    
   
    // Configure the DDR controller
    
    // Disable anticipated read
    //WRITE(pDdrc, HDDRSDRC2_HS, (READ(pDdrc, HDDRSDRC2_HS) | AT91C_DDRC2_NO_ANT));
    tempVal = __readMemory32(0xFFFFE82C,"Memory");
    tempVal |= 0x04;
    __writeMemory32(tempVal,0xFFFFE82C,"Memory");
    
    
    // -----------------------Step 1------------------- 
    // Program the memory device type
    // ------------------------------------------------ 
    
    //DDRSDRC->DDRSDRC_MD = DDRSDRC_MD_MD(DDR2_SDRAM) | DDRSDRC_MD_DBW;
    __writeMemory32(0x16,0xFFFFE820,"Memory");
    
    // -----------------------Step 2------------------- 
    // 1. Program the features of DDR2-SDRAM device into 
    //    the Configuration Register.
    // 2. Program the features of DDR2-SDRAM device into 
    //    the Timing Register HDDRSDRC2_T0PR.    
    // 3. Program the features of DDR2-SDRAM device into 
    //    the Timing Register HDDRSDRC2_T1PR.
    // 4. Program the features of DDR2-SDRAM device into 
    //    the Timing Register HDDRSDRC2_T2PR.
    // ------------------------------------------------ 
    
    /* DDRSDRC->DDRSDRC_CR = DDRSDRC_CR_NC(NC_DDR10_SDR9)  // 10 column bits (1K)
                            | DDRSDRC_CR_NR(NR_ROW_BIT_13) // 13 row bits    (8K)
                            | DDRSDRC_CR_CAS(3)            // CAS Latency 3
                            | (0x1 << 20);                 // (DDRSDRC) DDR2 8 bank
    */
    __writeMemory32(0x0000B9,0xFFFFE808,"Memory");
    
    /* assume timings for 7.5ns min clock period */
    /*
    DDRSDRC->DDRSDRC_T0PR = DDRSDRC_T0PR_TRAS(6)    //  6 * 7.5 = 45 ns
                          | DDRSDRC_T0PR_TRCD(2)    //  2 * 7.5 = 15 ns
                          | DDRSDRC_T0PR_TWR(2)     //  2 * 7.5 = 15 ns
                          | DDRSDRC_T0PR_TRC(8)     //  8 * 7.5 = 60 ns
                          | DDRSDRC_T0PR_TRP(2)     //  2 * 7.5 = 15 ns
                          | DDRSDRC_T0PR_TRRD(1)    //  2 * 7.5 = 15 ns
                          | DDRSDRC_T0PR_TWTR(1)    //  2 clock cycle
                          | DDRSDRC_T0PR_TMRD(2);   //  2 clock cycles
    */
    __writeMemory32(0x21128226,0xFFFFE80C,"Memory");

    /*
    DDRSDRC->DDRSDRC_T1PR = DDRSDRC_T1PR_TRFC(18)   // 18 * 7.5 = 135 ns (min 127.5 ns for 1Gb DDR)
                          | DDRSDRC_T1PR_TXSNR(19)  // 19 * 7.5 > 142.5ns TXSNR: Exit self refresh delay to non read command
                          | DDRSDRC_T1PR_TXSRD(200) // min 200 clock cycles, TXSRD: Exit self refresh delay to Read command
                          | DDRSDRC_T1PR_TXP(2);    //  2 * 7.5 = 15 ns
    */
    __writeMemory32(0x02c81312,0xFFFFE810,"Memory");
    
    /*
    DDRSDRC->DDRSDRC_T2PR = DDRSDRC_T2PR_TXARD(2)   //  min 2 clock cycles
                          | DDRSDRC_T2PR_TXARDS(7)  //  min 7 clock cycles
                          | DDRSDRC_T2PR_TRPA(3)
                          | DDRSDRC_T2PR_TRTP(1) ;  //  1 * 7.5 = 7.5 ns (min 7.5ns)
    */
    __writeMemory32(0x0001372,0xFFFFE814,"Memory");
    
    // -----------------------Step 3------------------- 
    // An NOP command is issued to the DDR2-SDRAM to 
    // enable clock.
    // ------------------------------------------------ 
    // DDRSDRC->DDRSDRC_MR = DDRSDRC_MR_MODE(DDRC2_MODE_NOP_CMD);

    __writeMemory32(0x1,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory");

    // A minimum pause of 200 ¦Ìs is provided to precede any signal toggle.
    __delay(200);

    // Now clocks which drive DDR2-SDRAM device are enabled
    
    // -----------------------Step 4------------------- 
    // An NOP command is issued to the DDR2-SDRAM 
    // ------------------------------------------------ 
    __writeMemory32(0x1,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory");
    // wait 400 ns min
    __delay(200);
    // Now CKE is driven high.

    // -----------------------Step 5------------------- 
    // An all banks precharge command is issued to the 
    // DDR2-SDRAM.
    // ------------------------------------------------ 
    
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD  
    __writeMemory32(0x2,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory");
    
    // wait 400 ns min
    __delay(1);

    // -----------------------Step 6------------------- 
    // An Extended Mode Register set (EMRS2) cycle is 
    // issued to chose between commercialor high 
    // temperature operations
    // ------------------------------------------------ 
   
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD  
    __writeMemory32(0x5,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x22000000,"Memory");  // The write address must be chosen so that BA[1] is set to 1 and BA[0] are set to 0.
    // wait 2 cycles min
    __delay(1);
    
    // -----------------------Step 7------------------- 
    // An Extended Mode Register set (EMRS3) cycle is 
    // issued to set all registers to 0.
    // ------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD  
    __writeMemory32(0x5,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x23000000,"Memory");  // The write address must be chosen so that BA[1] is set to 1 and BA[0] are set to 1.
    // wait 2 cycles min
    __delay(1);
    
    // -----------------------Step 8------------------- 
    // An Extended Mode Register set (EMRS1) cycle is 
    // issued to enable DLL.
    // ------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD  
    __writeMemory32(0x5,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x21000000,"Memory"); // The write address must be chosen so that BA[1] and BA[0] are set to 0.
    // An additional 200 cycles of clock are required for locking DLL
    __delay(1); 

    // -----------------------Step 9------------------- 
    // Program DLL field into the Configuration Register.
    // -------------------------------------------------
    
    // HDDRSDRC2_CR, cr | AT91C_DDRC2_DLL_RESET_ENABLED
    tempVal = __readMemory32(0xFFFFE808,"Memory");
    tempVal |= 0x80;
    __writeMemory32(tempVal,0xFFFFE808,"Memory");
    
    // -----------------------Step 10------------------- 
    // A Mode Register set (MRS) cycle is issued to reset
    // DLL.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_LMR_CMD
    __writeMemory32(0x3,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // The write address must be chosen so that BA[1:0] bits are set to 0.
    // wait 2 cycles min
    __delay(1);
    
    // -----------------------Step 11------------------- 
    // An all banks precharge command is issued to the 
    // DDR2-SDRAM.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD
    __writeMemory32(0x2,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // Perform a write access to any DDR2-SDRAM address to acknowledge this command.
    // wait 2 cycles min
    __delay(1);

    // -----------------------Step 12------------------- 
    // Two auto-refresh (CBR) cycles are provided. 
    // Program the auto refresh command (CBR) into the 
    // Mode Register.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_RFSH_CMD
    __writeMemory32(0x4,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // Performs a write access to any DDR2-SDRAM location twice to acknowledge these commands.
    // wait 2 cycles min
    __delay(1);
    // Set 2nd CBR
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_RFSH_CMD
    __writeMemory32(0x4,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // Performs a write access to any DDR2-SDRAM location twice to acknowledge these commands.
    // wait 2 cycles min
    __delay(1);
    
    // -----------------------Step 13------------------- 
    // Program DLL field into the Configuration Register
    // to low(Disable DLL reset).
    // -------------------------------------------------
    // HDDRSDRC2_CR, cr & (~AT91C_DDRC2_DLL_RESET_ENABLED)  
    tempVal = __readMemory32(0xFFFFE808,"Memory");
    tempVal &= 0xFFFFFF7F;
    __writeMemory32(tempVal,0xFFFFE808,"Memory");
    // wait 2 cycles min
    __delay(1);
    
    // -----------------------Step 14------------------- 
    // A Mode Register set (MRS) cycle is issued to 
    // program the parameters of the DDR2-SDRAM devices
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_LMR_CMD
    __writeMemory32(0x3,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // The write address must be chosen so that BA[1:0] are set to 0.
    // wait 2 cycles min
    __delay(1);
    
    // -----------------------Step 15------------------- 
    // Program OCD field into the Configuration Register
    // to high (OCD calibration default)
    // -------------------------------------------------
    tempVal = __readMemory32(0xFFFFE808,"Memory");
    tempVal |= (0x07 << 12);
    __writeMemory32(tempVal,0xFFFFE808,"Memory");
    __delay(1);
    
    // -----------------------Step 16------------------- 
    // An Extended Mode Register set (EMRS1) cycle is 
    // issued to OCD default value.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    __writeMemory32(0x5,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x21000000,"Memory"); // The write address must be chosen so that BA[1] is set to 0 and BA[0] is set to 1.
    // wait 2 cycles min
    __delay(1);
    
    // -----------------------Step 17------------------- 
    // Program OCD field into the Configuration Register 
    // to low (OCD calibration mode exit).
    // -------------------------------------------------
    tempVal = __readMemory32(0xFFFFE808,"Memory");
    tempVal &= 0xFFFF8FFF;
    __writeMemory32(tempVal,0xFFFFE808,"Memory");
    __delay(1);
    
    // -----------------------Step 18------------------- 
    // An Extended Mode Register set (EMRS1) cycle is 
    // issued to enable OCD exit.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    __writeMemory32(0x5,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x21000000,"Memory"); // The write address must be chosen so that BA[1] is set to 1 and BA[0] is set to 1.
    // wait 2 cycles min
    __delay(1);
    
    
    // -----------------------Step 19,20------------------- 
    // A mode Normal command is provided. Program the 
    // Normal mode into Mode Register.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_NORMAL_CMD
    __writeMemory32(0x0,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // Perform a write access to any DDR2-SDRAM address.
    // wait 2 cycles min
    __delay(1);
    
    // -----------------------Step 21------------------- 
    // Write the refresh rate into the count field in the 
    // Refresh Timer register. The DDR2-SDRAM device requires a
    // refresh every 15.625 ¦Ìs or 7.81 ¦Ìs. With a 100 
    // MHz frequency, the refresh timer count register must to 
    // be set with (15.625 /100 MHz) = 1562 i.e. 0x061A or 
    // (7.81 /100MHz) = 781 i.e. 0x030d
    // -------------------------------------------------
    // HDDRSDRC2_RTR, 0x00000411
    __writeMemory32(0x00000411,0xFFFFE804,"Memory");

    // Read optimization" shall be un-selected on this revision.
    __writeMemory32(0x04,0xFFFFE82C,"Memory");
    
    // OK now we are ready to work on the DDRSDR

    // wait for end of calibration
    __delay(1);

   __message "------------------------------- DDRAM configuration done -------------------------------";

}

/*********************************************************************
*
*       _MapRAMAt0()
* Function description
* Remap RAM at 0
*/
_MapRAMAt0()
{
  __var hold;
  // ******************************************************
  // Test and set Remap
  // ******************************************************
  hold = __readMemory32(0x00000000,"Memory");
  __writeMemory32(0xAAAAAAAA,0x00000000,"Memory");
  if(__readMemory32(0x00000000,"Memory") != 0xAAAAAAAA)
  {
    __writeMemory32(0x03,0xFFFFE100,"Memory");    // toggle remap bits
  }
  else
  {
    __writeMemory32(hold,0x00000000,"Memory");
  }
}


/*********************************************************************
*
*       __PllSetting()
* Function description
*   Initializes the PMC.
*   1. Enable the Main Oscillator
*   2. Configure PLL
*   3. Switch Master
*/
__PllSetting()
{
    __var read;
    __message "Switch to PLL + prescaler";
    read = __readMemory32(0xFFFFFC30,"Memory");
     read &= ~(0x3);
    read |= 1;
    __writeMemory32(read,0xFFFFFC30,"Memory");
    while (!((__readMemory32(0xFFFFFC68,"Memory")) & (0x1 << 3)));
    
    __message "Switch to main Osc";
    __writeMemory32(0x01374009,0xFFFFFC20,"Memory");
    while (!((__readMemory32(0xFFFFFC68,"Memory")) & (0x1 << 0)));
    
    __message "PLLA 0";
    __writeMemory32(0,0xFFFFFC28,"Memory");
    
    __message "Initialize PLLA";
    __writeMemory32(0x20C73F03,0xFFFFFC28,"Memory");
    while (!((__readMemory32(0xFFFFFC68,"Memory")) & (0x1 << 1)));
    while (!((__readMemory32(0xFFFFFC68,"Memory")) & (0x1 << 3)));
    
    __message "Switch to main oscillator + prescaler";
    read = __readMemory32(0xFFFFFC30,"Memory");
    read &= ~(0x3 << 8);
    read |= ((0x3 << 8) | (0x1 << 12));
    __writeMemory32(read,0xFFFFFC30,"Memory");
    while (!((__readMemory32(0xFFFFFC68,"Memory")) & (0x1 << 3)));

    __message "Switch to main oscillator + prescaler";
    read = __readMemory32(0xFFFFFC30,"Memory");
    read &= ~(0x7 << 4);
    read |= (0x0 << 4);
    __writeMemory32(read,0xFFFFFC30,"Memory");
    while (!((__readMemory32(0xFFFFFC68,"Memory")) & (0x1 << 3)));

    __message "Switch to PLL + prescaler";
    read = __readMemory32(0xFFFFFC30,"Memory");
    read &= ~(0x3);
    read |= 2;
    __writeMemory32(read,0xFFFFFC30,"Memory");
    while (!((__readMemory32(0xFFFFFC68,"Memory")) & (0x1 << 3)));

}



